Object subclass: #Album	instanceVariableNames: 'fotos estado id nombre fechaCreacion tipoPapel size'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:19'!getEstado	^estado! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:19'!getTipoPapel	^tipoPapel! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:18'!getFecha	^fechaCreacion ! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:41'!crearCopiaPendiente	^self.! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:17'!getID	^id! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:36'!getFotos	^fotos! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:20'!init	^self.! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:41'!pendiente	^self.! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:41'!agregar: unaFoto	^unaFoto.! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:42'!cantidadFotos	^self.! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:41'!impreso	^self.! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:17'!getNombre	^nombre! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:35'!getSize	^size! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:40'!costo	^self.! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:42'!eliminar: unaFoto	^unaFoto.! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:40'!imprimir	^self.! !Object subclass: #Foto	instanceVariableNames: 'file id desc fecha'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!Foto methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:09'!getID	^id! !!Foto methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 00:22'!getFecha	^fecha.! !!Foto methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:08'!getFile	^file! !!Foto methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 23:41'!actualizar: datos	self init: datos.! !!Foto methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:08'!getDesc	^desc! !!Foto methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 00:22'!init: datos	id := datos at: 1.	desc := datos at: 2.	file := datos at: 3.	fecha := DateAndTime now.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Foto class	instanceVariableNames: ''!!Foto class methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:45'!new: datos	|instance|	instance := super new.	instance init: datos.	^instance.! !TestCase subclass: #FotoTest	instanceVariableNames: 'unaFoto'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!FotoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 00:24'!test_new_init	"	Foto.new llama a init que crea las variables de instancia		id		desc		file	"	self assert: (unaFoto getID) = 123.	self assert: (unaFoto getDesc) = 'atardecer en la laguna'.	self assert: (unaFoto getFile) = 'atardecer-setubal.jpg'.	self assert: ((unaFoto getFecha) class) = DateAndTime.! !!FotoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 00:06'!setUp	unaFoto := Foto new: #(123 'atardecer en la laguna' 'atardecer-setubal.jpg').! !!FotoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 00:09'!test_actualizar	"	Foto.actualizar actualiza los datos de la foto	"	self assert: (unaFoto getID) = 123.	self assert: (unaFoto getDesc) = 'atardecer en la laguna'.	self assert: (unaFoto getFile) = 'atardecer-setubal.jpg'.	unaFoto actualizar: #(321 'amanecer en la ciudad' 'amanecer-centro.png').	self assert: (unaFoto getID) = 321.	self assert: (unaFoto getDesc) = 'amanecer en la ciudad'.	self assert: (unaFoto getFile) = 'amanecer-centro.png'.	! !TestCase subclass: #FotografoTest	instanceVariableNames: 'unFotografo'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 22:06'!test_eliminaFoto	"	elimina la foto si esta pertenece	"	|unaFoto fotos|	fotos := unFotografo getFotos.	self assert: (fotos size) = 0.	unaFoto := unFotografo nuevaFoto: #(345 'some picture' 'some-picture.jpg').	self assert: (fotos size) = 1.	self assert: (fotos at: 1) == unaFoto. " chequeamos que sea el mismo objeto "			! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 00:14'!test_actualizar_existente	"	Foto.actualizar.con actualiza los datos de la foto si esta existe	"	|unaFoto fueActualizada|	unaFoto := unFotografo nuevaFoto: #(123 'atardecer en la laguna' 'atardecer-setubal.jpg').	self assert: (unFotografo getFotos) size = 1.		fueActualizada := unFotografo actualizar: unaFoto con: #(321 'amanecer en la ciudad' 'amanecer-centro.png').	self assert: fueActualizada.	self assert: (unaFoto getID) = 321.	self assert: (unaFoto getDesc) = 'amanecer en la ciudad'.	self assert: (unaFoto getFile) = 'amanecer-centro.png'.		! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 00:26'!test_nuevaFoto	"	Fotografo.nuevaFoto crea una foto nueva, la agrega a Fotografo.fotos y devuelve la foto creada	"	|unaFoto fotos|	fotos := unFotografo getFotos.	self assert: (fotos size) = 0.	unaFoto := unFotografo nuevaFoto: #(345 'some picture' 'some-picture.jpg').	self assert: (fotos size) = 1.	self assert: (fotos at: 1) == unaFoto. " chequeamos que sea el mismo objeto "			! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 22:10'!test_eliminaFoto_existente	"	elimina la foto si esta pertenece	"	|unaFoto fotos|	fotos := unFotografo getFotos.	self assert: (fotos size) = 0.	unaFoto := unFotografo nuevaFoto: #(345 'some picture' 'some-picture.jpg').	self assert: (fotos size) = 1.	self assert: (unFotografo eliminarFoto: unaFoto).	self assert: (fotos size) = 0.			! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 00:13'!test_actualizar_noExistente	"	Foto.actualizar.con actualiza los datos de la foto si esta existe	"	|unaFoto otraFoto fueActualizada|	unaFoto := unFotografo nuevaFoto: #(123 'atardecer en la laguna' 'atardecer-setubal.jpg').	otraFoto := Foto new: #(321 'amanecer en la ciudad' 'amanecer-centro.png').	self assert: (unFotografo getFotos) size = 1.		fueActualizada := unFotografo actualizar: otraFoto con: #(555 'la la la' 'la_la_la.png').	self deny: fueActualizada.	self deny: (unaFoto getID) = 555.	self deny: (unaFoto getDesc) = 'la la la'.	self deny: (unaFoto getFile) = 'la_la_la.png'.		! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:55'!test_new_init	"	Fotografo.new llama a init creando las variables de instancia		id		nombre		apellido		email		direccion		nombreArtistico		fotos -> como una OrderedCollection vacia	"	self assert: (unFotografo getID) = 123.	self assert: (unFotografo getNombre) = 'John'.	self assert: (unFotografo getApellido) = 'Doe'.	self assert: (unFotografo getEmail) = 'jdoe@gmail.com'.	self assert: (unFotografo getDireccion) = #(Lavaisie 1234).	self assert: (unFotografo getNombreArtistico) = 'jDoe'.	self assert: (unFotografo getFotos) = (OrderedCollection new).! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 22:12'!test_eliminaFoto_noExistente	"	devuelve False cuando la foto no le pertenece	"	|unaFoto fotos|	fotos := unFotografo getFotos.	self assert: (fotos size) = 0.	unaFoto := Foto new: #(345 'some picture' 'some-picture.jpg').	self deny: (unFotografo eliminarFoto: unaFoto).	self assert: (fotos size) = 0. 			! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:55'!setUp	unFotografo := Fotografo new: #(123 John Doe 'jdoe@gmail.com' #(Lavaisie 1234) jDoe).! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 07:34'!test_verFotosDesde	"	devuelve las fotos desde la fecha	"	|ninguna todas fechaFutura fechaPasada now|	unFotografo nuevaFoto: #(1 'a' 'a.jpg').	unFotografo nuevaFoto: #(2 'b' 'b.jpg').	unFotografo nuevaFoto: #(3 'c' 'c.jpg').	unFotografo nuevaFoto: #(4 'd' 'd.jpg').		now := DateAndTime now.	fechaPasada := DateAndTime year: (now year - 1) month: 11 day: 21 hour: 12 minute: 53 second: 12.	fechaFutura:= DateAndTime year: (now year + 1) month: 11 day: 21 hour: 12 minute: 53 second: 12.		ninguna := unFotografo verFotosDesde: fechaFutura.	todas := unFotografo verFotosDesde: fechaPasada.	self assert: todas = (unFotografo getFotos).	self assert: ninguna = (OrderedCollection new).! !Object subclass: #LaboratorioFotografico	instanceVariableNames: 'fotografos fotos albumesPendientes albumesImpresos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:32'!buscarClienteCon: unNombre	^unNombre.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:24'!nuevaFoto: datosFoto de: nombreFotografo	^#(datosFoto nombreFotografo).! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:34'!clientesPendientesDesde: unaFecha	^unaFecha.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:30'!albumesImpresosDesde: unaFecha hasta: otraFecha	^#(unaFecha otraFecha).! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:27'!impresionAlbum: unAlbum	^#(unAlbum).! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:33'!verAlbum: unTexto de: unCliente	^#(unTexto unCliente).! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:28'!albumesImpresosAntesDe: unaFecha	^unaFecha.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 19:55'!eliminarFotografo: nombreFotografo^nombreFotografo.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:39'!nuevoFotografo: unArreglodeDatos	|unFotografo|	unFotografo := Fotografo new: unArreglodeDatos.	fotografos add: unFotografo.	^unFotografo.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:30'!costoDe: unAlbum	^unAlbum.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:31'!demoraImpresion	^self.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:26'!crearAlbum: listaFotos con: unTamaño enPapel: tipoPapel para: nombreCliente	^#(listaFotos unTamaño tipoPapel nombreCliente).! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:46'!getFotos	^fotos.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:27'!cantidadFotosDe: nombreFotografo	^nombreFotografo.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:31'!buscarFotografoCon: unNombre	^unNombre.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:25'!eliminarFoto: unaFoto de: nombreFotografo	^#(unaFoto nombreFotografo).! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:45'!getAlbumesPendientes	^albumesPendientes.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:49'!init	"fotografos fotos albumesPendientes albumesImpresos"	fotografos := OrderedCollection new.	fotos := OrderedCollection new.	albumesPendientes := OrderedCollection new.	albumesImpresos := OrderedCollection new.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:25'!buscarFotos: unTexto	^unTexto.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:33'!pendientesDesde: unaFecha	^unaFecha.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:45'!getFotografos	^fotografos.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:31'!costoPromedioDesde: unaFecha	^unaFecha.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:45'!getAlbumesImpresos	^albumesImpresos.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LaboratorioFotografico class	instanceVariableNames: ''!!LaboratorioFotografico class methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:54'!new	|instancia|	instancia := super new.	instancia init.	^instancia.! !TestCase subclass: #LaboratorioFotograficoTest	instanceVariableNames: 'unLaboratorio'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!LaboratorioFotograficoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:31'!test_NuevoFotografo	"LaboratorioFotografico nuevoFotografo crea un nuevo fotografo, lo agrega a la lista de fotografos y lo devuelve"	|unFotografo|		self assert: ((unLaboratorio  getFotografos ) size) = 0.	unFotografo := unLaboratorio nuevoFotografo: #(123 John Doe jdoe@gmail #(Lavaizie 2701) jDoe).	self assert: ((unLaboratorio  getFotografos ) size) = 1.	self assert: ((unLaboratorio getFotografos) at: 1) = unFotografo.	self assert: (unFotografo class) = Fotografo.! !!LaboratorioFotograficoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 18:34'!setUp	unLaboratorio := LaboratorioFotografico new.! !!LaboratorioFotograficoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 18:41'!test_new_init	"	LaboratorioFotografico new. llama a init creando las variables de instancia		fotografos,		fotos,		albumesPendientes,		albumesImpresos	como OrderedCollections vacías	"	|fotografos fotos albumesPendientes albumesImpresos|	fotografos := unLaboratorio getAlbumesImpresos.	fotos := unLaboratorio getAlbumesPendientes.	albumesPendientes := unLaboratorio getFotografos.	albumesImpresos := unLaboratorio getFotos.	self assert: (fotografos class) = OrderedCollection .	self assert: (fotografos size) = 0.	self assert: (fotos class) = OrderedCollection.	self assert: (fotos size) = 0.	self assert: (albumesPendientes class) = OrderedCollection.	self assert: (albumesPendientes size) = 0.	self assert: (albumesImpresos class) = OrderedCollection.		self assert: (albumesImpresos size) = 0.! !Object subclass: #Persona	instanceVariableNames: 'id nombre apellido email direccion'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:44'!getID	^id.! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:50'!setEmail: val	email := val.	! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:43'!getApellido	^apellido.! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:44'!getDireccion	^direccion.! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:43'!getNombre	^nombre.! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:51'!setDireccion: val	direccion := val.	! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:44'!getEmail	^email.! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:50'!init: datos	id := datos at: 1.	nombre := datos at: 2.	apellido := datos at: 3.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Persona class	instanceVariableNames: ''!!Persona class methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:47'!new: datos	|instancia|	instancia := super new.	instancia init: datos.	^instancia.! !Persona subclass: #Cliente	instanceVariableNames: 'albumes'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:42'!getAlbumes	^albumes.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:38'!albumesPendientes	^self.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:39'!costoPendientes	^self.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:38'!buscarAlbumPor: unNombre	^unNombre.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:39'!masViejo	^self.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:38'!crearAlbum: unNombre con: listaFotos de: unTamaño enPapel: tipoPapel	^#(unNombre listaFoto unTamaño tipoPapel).! !Persona subclass: #Fotografo	instanceVariableNames: 'nombreArtistico fotos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:41'!getFotos	^fotos.! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 07:35'!verFotosDesde: unaFecha	^(fotos select: [ :i |		((i getFecha) asSeconds) > (unaFecha asSeconds).	]).! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:39'!init: datos	super init: datos.	self setEmail: (datos at: 4).	self setDireccion: (datos at: 5).	self setNombreArtistico: (datos at: 6).	fotos := OrderedCollection new.! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:01'!getNombreArtistico 	^nombreArtistico ! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 23:57'!actualizar: unaFoto con: datosFoto	|includes selected |	includes := fotos includes: unaFoto.	includes ifTrue: [		selected := fotos select: [:i| i = unaFoto ].		(selected at: 1) actualizar: datosFoto.	].	^includes.! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 22:15'!eliminarFoto: unaFoto	|includes|	includes := fotos includes: unaFoto.	includes 		ifTrue: [			fotos remove: unaFoto.		].	^includes.! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:52'!nuevaFoto: datosFoto	|nFoto|	nFoto := Foto new: datosFoto.	fotos add: nFoto.	^nFoto.	! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:30'!setNombreArtistico: val 	nombreArtistico := val.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Fotografo class	instanceVariableNames: ''!!Fotografo class methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:33'!new: datos	"	datos: #(id nombre apellido email direccion nombreArtistico)		direccion: #(calle numbero)	"	|instacia|	instacia := super new.	instacia init: datos.	^instacia.! !TestCase subclass: #PersonaTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!PersonaTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:24'!test_new_init	"	Persona.new llama a init creando las variables de instancia		id		nombre		apellido	"	|aPerson|	aPerson := Persona new: #(123 John Doe).	self assert: (aPerson getID) = 123.	self assert: (aPerson getNombre) = 'John'.	self assert: (aPerson getApellido) = 'Doe'.! !