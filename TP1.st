Object subclass: #Album	instanceVariableNames: 'fotos estado id nombre fechaCreacion tipoPapel size'	classVariableNames: 'ProximoID'	poolDictionaries: ''	category: 'TP'!!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:19'!getEstado	^estado! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:19'!getTipoPapel	^tipoPapel! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:18'!getFecha	^fechaCreacion ! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:18'!crearCopiaPendiente	|copia datos|	datos := {		self getNombre.		((self getFotos) deepCopy) asArray.		self getSize.		self getTipoPapel.	}.	copia := Album new: datos.	^copia.! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:17'!getID	^id! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:36'!getFotos	^fotos! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:11'!init: datos	"	datos: #(nombre fotos size tipoPapel)	"	id := Album obtenerId.	nombre := datos at: 1.	fotos := (datos at: 2) asOrderedCollection.	size := datos at: 3.	tipoPapel := datos at: 4.		fechaCreacion := DateAndTime now.	estado := 'pendiente'.! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 19:36'!setComoImpreso	estado := 'impreso'.! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 19:41'!pendiente	^(estado = 'pendiente').! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 18:14'!agregar: unaFoto	|puedeAgregar|	puedeAgregar := estado =  'pendiente'.	puedeAgregar ifTrue: [ 		fotos add: unaFoto.	].	^puedeAgregar.! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 01:18'!cantidadFotos	^(fotos size).! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 19:41'!impreso	^(estado = 'impreso').! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:17'!getNombre	^nombre! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:35'!getSize	^size! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 19:20'!costo	"	tabla de costos: se calcula sumando los valores de cada categoría	tipo:		mate: 10		brillo: 15	tamaño		chico: 7		mediano: 10		grande: 12	"	|cantidad valorTipo valorSize|	cantidad := fotos size.		(tipoPapel = 'mate') ifTrue: [		valorTipo := 10.	]	ifFalse: [		(tipoPapel = 'brillo') ifTrue: [			valorTipo := 15.		].	].	(size = 'pequeño') ifTrue: [		valorSize := 7.	]	ifFalse: [		(size = 'mediano') ifTrue: [			valorSize := 10.		]		ifFalse: [			(size = 'grande') ifTrue: [				valorSize := 12.			].		].	].		^(cantidad * (valorTipo + valorSize)).! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 00:54'!eliminar: unaFoto	|poseeFoto|	poseeFoto := fotos includes: unaFoto.	(self pendiente & poseeFoto) ifTrue: [		fotos remove: unaFoto.	].! !!Album methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 00:41'!imprimir	|esImpreso|	esImpreso := self impreso.	esImpreso ifTrue: [		^Error new.	]	ifFalse: [		self setComoImpreso.		^self.	].	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Album class	instanceVariableNames: ''!!Album class methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 18:16'!new: datos	|instacia|	instacia := super new.	instacia init: datos.	^instacia.! !!Album class methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:13'!obtenerId	(ProximoID isNil) ifTrue: [		ProximoID := 0.		^ProximoID.	].	ProximoID := ProximoID + 1.	^ProximoID.! !TestCase subclass: #AlbumTest	instanceVariableNames: 'unAlbum unaFoto arregloFotos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!AlbumTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:24'!test_costo	"	unAlbum: 3 fotos, pequeño, mate	"	|elCosto|		elCosto := unAlbum costo.	self assert: elCosto  = ( 3 * (7 + 10) ).	unAlbum := Album new: {'Nomre album'. {unaFoto. unaFoto. unaFoto. unaFoto.}. 'mediano'. 'mate'}.	elCosto := unAlbum costo.	self assert: elCosto  = ( 4 * (10 + 10) ).	unAlbum := Album new: {'Nomre album'. {unaFoto. unaFoto. unaFoto. unaFoto. unaFoto.}. 'grande'. 'mate'}.	elCosto := unAlbum costo.	self assert: elCosto  = ( 5 * (12 + 10) ).	unAlbum := Album new: {'Nomre album'. {unaFoto. unaFoto. unaFoto. }. 'grande'. 'brillo'}.	elCosto := unAlbum costo.	self assert: elCosto  = ( 3 * (12 + 15) ).	unAlbum := Album new: {'Nomre album'. {unaFoto. unaFoto. unaFoto. }. 'pequeño'. 'brillo'}.	elCosto := unAlbum costo.	self assert: elCosto  = ( 3 * (7 + 15) ).	unAlbum := Album new: {'Nomre album'. {unaFoto. unaFoto. }. 'mediano'. 'brillo'}.	elCosto := unAlbum costo.	self assert: elCosto  = ( 2 * (10 + 15) ).	unAlbum := Album new: {'Nomre album'. {}. 'mediano'. 'brillo'}.	elCosto := unAlbum costo.	self assert: elCosto  =  0.! !!AlbumTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 01:03'!test_eliminar_impreso	"	no elimina una foto sólamente si fue impreso	"	unAlbum imprimir.	self assert: (unAlbum getFotos) size = 3.	unAlbum eliminar: unaFoto.	self assert: (unAlbum getFotos) size = 3.! !!AlbumTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 01:15'!test_crearCopiaPendiente	"	devuelve una deep copy del el album en modo pendiente	"	|copiaPendiente|	unAlbum setComoImpreso.	self assert: unAlbum impreso.	copiaPendiente := unAlbum crearCopiaPendiente.		self deny: copiaPendiente == unAlbum.	self deny: copiaPendiente impreso.! !!AlbumTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 01:02'!test_eliminar	"	elimina una foto sólamente si el album no fue impreso	"	self assert: (unAlbum getFotos) size = 3.	unAlbum eliminar: unaFoto.	self assert: (unAlbum getFotos) size = 2.	unAlbum imprimir.! !!AlbumTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 01:19'!test_cantidad_fotos	|cantidad|	cantidad := unAlbum cantidadFotos.	self assert: cantidad = (unAlbum getFotos) size.! !!AlbumTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 20:10'!test_impreso_pendiente_setComoImpreso	"	Album imprespo devuelve true si el album fue impreso	Album pendiente devuelve true si el album está pendiente	Album setComoImpreso cambia el estado el album a impreso	"	self deny: unAlbum impreso.	self assert: unAlbum pendiente.	unAlbum setComoImpreso.	self assert: unAlbum impreso.	self deny: unAlbum pendiente.! !!AlbumTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:25'!test_new_init	"	Album new. llama a init creando las variables de instancia		fotos,		estado,		id,		nombre,		fechaCreacion,		tipoPapel,		size	con los valores correspondientes		id := datos at: 1.	nombre := datos at: 2.	fotos := datos at: 3.	size := datos at: 4.	tipoPapel := datos at: 5.		"		self assert: unAlbum getEstado = 'pendiente'.	self assert: unAlbum getFecha class = DateAndTime.	self assert: unAlbum getNombre = 'Nomre album'.	self assert: unAlbum getFotos = arregloFotos asOrderedCollection.	self assert: unAlbum getSize = 'pequeño'.	self assert: unAlbum getTipoPapel = 'mate'.! !!AlbumTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 00:48'!test_imprimir	"	Album imprimir devuelve el mismo album impreso, o un error en el caso de que el album ya esté impreso	"	|albumImpreso|	albumImpreso := unAlbum imprimir.	self assert: albumImpreso impreso.	self deny: albumImpreso pendiente.	self assert: unAlbum impreso.	self deny: unAlbum pendiente.	self assert: (unAlbum imprimir) class = Error. "no encontramos la forma de testear con should: raise:"! !!AlbumTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:24'!setUp	|foto2 foto3|	unaFoto := Foto new: #('una foto' 'una-foto-jpg').	foto2 := Foto new: #('una foto' 'una-foto-jpg').	foto3 := Foto new: #('una foto' 'una-foto-jpg').	arregloFotos := {unaFoto. foto2. foto3.}.	unAlbum := Album new: {'Nomre album'. arregloFotos. 'pequeño'. 'mate'}.! !TestCase subclass: #ClienteTest	instanceVariableNames: 'unCliente unAlbum unaFoto'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!ClienteTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:35'!setUp	|album2 album3 foto2|	unCliente := Cliente new: { 'John'. 'Doe'. }.	unaFoto := Foto new: {'nombre'. 'nombre.jpg'}.	foto2 := Foto new: {'nombre2'. 'nombre2.jpg'}.	unAlbum := unCliente crearAlbum: 'un album' con: { unaFoto. foto2. } de: 'mediano' enPapel: 'mate'.	album2 := unCliente crearAlbum: 'album2' con: { unaFoto. foto2. foto2. } de: 'grande' enPapel: 'brillo'.	album3 := unCliente crearAlbum: 'album3' con: { unaFoto. foto2. foto2. } de: 'pequeño' enPapel: 'mate'.! !!ClienteTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:41'!test_albumesPendientes	|pendientes|	pendientes := unCliente albumesPendientes.		self assert: pendientes size = 3.	unAlbum setComoImpreso.	pendientes := unCliente albumesPendientes.	self assert: pendientes size = 2.! !Object subclass: #Foto	instanceVariableNames: 'file id desc fecha'	classVariableNames: 'ProximoID'	poolDictionaries: ''	category: 'TP'!!Foto methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:09'!getID	^id! !!Foto methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 00:22'!getFecha	^fecha.! !!Foto methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:08'!getFile	^file! !!Foto methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 23:41'!actualizar: datos	self init: datos.! !!Foto methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:08'!getDesc	^desc! !!Foto methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:17'!init: datos	id := Foto obtenerId.	desc := datos at: 1.	file := datos at: 2.	fecha := DateAndTime now.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Foto class	instanceVariableNames: ''!!Foto class methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:45'!new: datos	|instance|	instance := super new.	instance init: datos.	^instance.! !!Foto class methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:16'!obtenerId	(ProximoID isNil) ifTrue: [		ProximoID := 0.		^ProximoID.	].	ProximoID := ProximoID + 1.	^ProximoID.! !TestCase subclass: #FotoTest	instanceVariableNames: 'unaFoto'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!FotoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:23'!test_new_init	"	Foto.new llama a init que crea las variables de instancia		id		desc		file	"	self assert: (unaFoto getDesc) = 'atardecer en la laguna'.	self assert: (unaFoto getFile) = 'atardecer-setubal.jpg'.	self assert: ((unaFoto getFecha) class) = DateAndTime.! !!FotoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:23'!setUp	unaFoto := Foto new: #('atardecer en la laguna' 'atardecer-setubal.jpg').! !!FotoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:23'!test_actualizar	"	Foto.actualizar actualiza los datos de la foto	"	self assert: (unaFoto getDesc) = 'atardecer en la laguna'.	self assert: (unaFoto getFile) = 'atardecer-setubal.jpg'.	unaFoto actualizar: #('amanecer en la ciudad' 'amanecer-centro.png').	self assert: (unaFoto getDesc) = 'amanecer en la ciudad'.	self assert: (unaFoto getFile) = 'amanecer-centro.png'.	! !TestCase subclass: #FotografoTest	instanceVariableNames: 'unFotografo'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:22'!test_eliminaFoto	"	elimina la foto si esta pertenece	"	|unaFoto fotos|	fotos := unFotografo getFotos.	self assert: (fotos size) = 0.	unaFoto := unFotografo nuevaFoto: #('some picture' 'some-picture.jpg').	self assert: (fotos size) = 1.	self assert: (fotos at: 1) == unaFoto. " chequeamos que sea el mismo objeto "			! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:21'!test_actualizar_existente	"	Foto.actualizar.con actualiza los datos de la foto si esta existe	"	|unaFoto fueActualizada|	unaFoto := unFotografo nuevaFoto: #('atardecer en la laguna' 'atardecer-setubal.jpg').	self assert: (unFotografo getFotos) size = 1.		fueActualizada := unFotografo actualizar: unaFoto con: #('amanecer en la ciudad' 'amanecer-centro.png').	self assert: fueActualizada.	self assert: (unaFoto getDesc) = 'amanecer en la ciudad'.	self assert: (unaFoto getFile) = 'amanecer-centro.png'.		! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:22'!test_nuevaFoto	"	Fotografo.nuevaFoto crea una foto nueva, la agrega a Fotografo.fotos y devuelve la foto creada	"	|unaFoto fotos|	fotos := unFotografo getFotos.	self assert: (fotos size) = 0.	unaFoto := unFotografo nuevaFoto: #('some picture' 'some-picture.jpg').	self assert: (fotos size) = 1.	self assert: (fotos at: 1) == unaFoto. " chequeamos que sea el mismo objeto "			! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:22'!test_eliminaFoto_existente	"	elimina la foto si esta pertenece	"	|unaFoto fotos|	fotos := unFotografo getFotos.	self assert: (fotos size) = 0.	unaFoto := unFotografo nuevaFoto: #('some picture' 'some-picture.jpg').	self assert: (fotos size) = 1.	self assert: (unFotografo eliminarFoto: unaFoto).	self assert: (fotos size) = 0.			! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:22'!test_actualizar_noExistente	"	Foto.actualizar.con actualiza los datos de la foto si esta existe	"	|unaFoto otraFoto fueActualizada|	unaFoto := unFotografo nuevaFoto: #('atardecer en la laguna' 'atardecer-setubal.jpg').	otraFoto := Foto new: #('amanecer en la ciudad' 'amanecer-centro.png').	self assert: (unFotografo getFotos) size = 1.		fueActualizada := unFotografo actualizar: otraFoto con: #('la la la' 'la_la_la.png').	self deny: fueActualizada.	self deny: (unaFoto getDesc) = 'la la la'.	self deny: (unaFoto getFile) = 'la_la_la.png'.		! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:21'!test_new_init	"	Fotografo.new llama a init creando las variables de instancia		id		nombre		apellido		email		direccion		nombreArtistico		fotos -> como una OrderedCollection vacia	"	self assert: (unFotografo getNombre) = 'John'.	self assert: (unFotografo getApellido) = 'Doe'.	self assert: (unFotografo getEmail) = 'jdoe@gmail.com'.	self assert: (unFotografo getDireccion) = #(Lavaisie 1234).	self assert: (unFotografo getNombreArtistico) = 'jDoe'.	self assert: (unFotografo getFotos) = (OrderedCollection new).! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:22'!test_eliminaFoto_noExistente	"	devuelve False cuando la foto no le pertenece	"	|unaFoto fotos|	fotos := unFotografo getFotos.	self assert: (fotos size) = 0.	unaFoto := Foto new: #('some picture' 'some-picture.jpg').	self deny: (unFotografo eliminarFoto: unaFoto).	self assert: (fotos size) = 0. 			! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:21'!setUp	unFotografo := Fotografo new: #(John Doe 'jdoe@gmail.com' #(Lavaisie 1234) jDoe).! !!FotografoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:23'!test_verFotosDesde	"	devuelve las fotos desde la fecha	"	|ninguna todas fechaFutura fechaPasada now|	unFotografo nuevaFoto: #('a' 'a.jpg').	unFotografo nuevaFoto: #('b' 'b.jpg').	unFotografo nuevaFoto: #('c' 'c.jpg').	unFotografo nuevaFoto: #('d' 'd.jpg').		now := DateAndTime now.	fechaPasada := DateAndTime year: (now year - 1) month: 11 day: 21 hour: 12 minute: 53 second: 12.	fechaFutura:= DateAndTime year: (now year + 1) month: 11 day: 21 hour: 12 minute: 53 second: 12.		ninguna := unFotografo verFotosDesde: fechaFutura.	todas := unFotografo verFotosDesde: fechaPasada.	self assert: todas = (unFotografo getFotos).	self assert: ninguna = (OrderedCollection new).! !Object subclass: #LaboratorioFotografico	instanceVariableNames: 'fotografos fotos albumesPendientes albumesImpresos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:32'!buscarClienteCon: unNombre	^unNombre.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:24'!nuevaFoto: datosFoto de: nombreFotografo	^#(datosFoto nombreFotografo).! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:34'!clientesPendientesDesde: unaFecha	^unaFecha.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:30'!albumesImpresosDesde: unaFecha hasta: otraFecha	^#(unaFecha otraFecha).! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:27'!impresionAlbum: unAlbum	^#(unAlbum).! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:33'!verAlbum: unTexto de: unCliente	^#(unTexto unCliente).! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:28'!albumesImpresosAntesDe: unaFecha	^unaFecha.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 19:55'!eliminarFotografo: nombreFotografo^nombreFotografo.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:39'!nuevoFotografo: unArreglodeDatos	|unFotografo|	unFotografo := Fotografo new: unArreglodeDatos.	fotografos add: unFotografo.	^unFotografo.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:30'!costoDe: unAlbum	^unAlbum.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:31'!demoraImpresion	^self.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:26'!crearAlbum: listaFotos con: unTamaño enPapel: tipoPapel para: nombreCliente	^#(listaFotos unTamaño tipoPapel nombreCliente).! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:46'!getFotos	^fotos.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:27'!cantidadFotosDe: nombreFotografo	^nombreFotografo.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:31'!buscarFotografoCon: unNombre	^unNombre.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:25'!eliminarFoto: unaFoto de: nombreFotografo	^#(unaFoto nombreFotografo).! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:45'!getAlbumesPendientes	^albumesPendientes.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:49'!init	"fotografos fotos albumesPendientes albumesImpresos"	fotografos := OrderedCollection new.	fotos := OrderedCollection new.	albumesPendientes := OrderedCollection new.	albumesImpresos := OrderedCollection new.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:25'!buscarFotos: unTexto	^unTexto.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:33'!pendientesDesde: unaFecha	^unaFecha.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:45'!getFotografos	^fotografos.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 9/27/2016 20:31'!costoPromedioDesde: unaFecha	^unaFecha.! !!LaboratorioFotografico methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:45'!getAlbumesImpresos	^albumesImpresos.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LaboratorioFotografico class	instanceVariableNames: ''!!LaboratorioFotografico class methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 17:54'!new	|instancia|	instancia := super new.	instancia init.	^instancia.! !TestCase subclass: #LaboratorioFotograficoTest	instanceVariableNames: 'unLaboratorio'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!LaboratorioFotograficoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:31'!test_NuevoFotografo	"LaboratorioFotografico nuevoFotografo crea un nuevo fotografo, lo agrega a la lista de fotografos y lo devuelve"	|unFotografo|		self assert: ((unLaboratorio  getFotografos ) size) = 0.	unFotografo := unLaboratorio nuevoFotografo: #(123 John Doe jdoe@gmail #(Lavaizie 2701) jDoe).	self assert: ((unLaboratorio  getFotografos ) size) = 1.	self assert: ((unLaboratorio getFotografos) at: 1) = unFotografo.	self assert: (unFotografo class) = Fotografo.! !!LaboratorioFotograficoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 18:34'!setUp	unLaboratorio := LaboratorioFotografico new.! !!LaboratorioFotograficoTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 18:41'!test_new_init	"	LaboratorioFotografico new. llama a init creando las variables de instancia		fotografos,		fotos,		albumesPendientes,		albumesImpresos	como OrderedCollections vacías	"	|fotografos fotos albumesPendientes albumesImpresos|	fotografos := unLaboratorio getAlbumesImpresos.	fotos := unLaboratorio getAlbumesPendientes.	albumesPendientes := unLaboratorio getFotografos.	albumesImpresos := unLaboratorio getFotos.	self assert: (fotografos class) = OrderedCollection .	self assert: (fotografos size) = 0.	self assert: (fotos class) = OrderedCollection.	self assert: (fotos size) = 0.	self assert: (albumesPendientes class) = OrderedCollection.	self assert: (albumesPendientes size) = 0.	self assert: (albumesImpresos class) = OrderedCollection.		self assert: (albumesImpresos size) = 0.! !Object subclass: #Persona	instanceVariableNames: 'id nombre apellido email direccion'	classVariableNames: 'ProximoID'	poolDictionaries: ''	category: 'TP'!!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:44'!getID	^id.! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:50'!setEmail: val	email := val.	! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:43'!getApellido	^apellido.! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:44'!getDireccion	^direccion.! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:43'!getNombre	^nombre.! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:51'!setDireccion: val	direccion := val.	! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:44'!getEmail	^email.! !!Persona methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:15'!init: datos	id := Persona obtenerId.	nombre := datos at: 1.	apellido := datos at: 2.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Persona class	instanceVariableNames: ''!!Persona class methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:47'!new: datos	|instancia|	instancia := super new.	instancia init: datos.	^instancia.! !!Persona class methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:14'!obtenerId	(ProximoID isNil) ifTrue: [		ProximoID := 0.		^ProximoID.	].	ProximoID := ProximoID + 1.	^ProximoID.! !Persona subclass: #Cliente	instanceVariableNames: 'albumes'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:42'!getAlbumes	^albumes.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 01:31'!albumesPendientes	^(albumes select: [ :i|		i pendiente.	]).! !!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 01:43'!costoPendientes	|costoTotalPendiente|	costoTotalPendiente := 0.	albumes do: [ :i|		(i pendiente) ifTrue: [			costoTotalPendiente := (costoTotalPendiente + (i costo))		].	].	^costoTotalPendiente.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 01:33'!buscarAlbumPor: unNombre	|result|	result := (albumes select: [ :i|		unNombre = (i getNombre)	]).	((result size) > 0 ) ifTrue: [		^result at: 1.	].! !!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:05'!masViejo	|albumMásViejo pendientes|	pendientes := self albumesPendientes.	(pendientes size > 0) ifTrue: [		albumMásViejo := pendientes at: 1.		pendientes do: [ :i|			(				((albumMásViejo getFecha) asSeconds) > 				((i getFecha) asSeconds)			) ifTrue: [				albumMásViejo := i.			].					].	].	^albumMásViejo.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 01:36'!crearAlbum: unNombre con: listaFotos de: unTamaño enPapel: tipoPapel	|nuevoAlbum|	nuevoAlbum := Album new: { unNombre. listaFotos. unTamaño. tipoPapel. }.	albumes add: nuevoAlbum.	^nuevoAlbum.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:41'!init: datos	super init: datos.	albumes := OrderedCollection new.	! !Persona subclass: #Fotografo	instanceVariableNames: 'nombreArtistico fotos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:41'!getFotos	^fotos.! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/4/2016 07:38'!verFotosDesde: unaFecha	^(fotos select: [ :i |		((i getFecha) asSeconds) > (unaFecha asSeconds).	]).! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:20'!init: datos	super init: datos.	self setEmail: (datos at: 3).	self setDireccion: (datos at: 4).	self setNombreArtistico: (datos at: 5).	fotos := OrderedCollection new.! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 20:01'!getNombreArtistico 	^nombreArtistico ! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 23:57'!actualizar: unaFoto con: datosFoto	|includes selected |	includes := fotos includes: unaFoto.	includes ifTrue: [		selected := fotos select: [:i| i = unaFoto ].		(selected at: 1) actualizar: datosFoto.	].	^includes.! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 22:15'!eliminarFoto: unaFoto	|includes|	includes := fotos includes: unaFoto.	includes 		ifTrue: [			fotos remove: unaFoto.		].	^includes.! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:52'!nuevaFoto: datosFoto	|nFoto|	nFoto := Foto new: datosFoto.	fotos add: nFoto.	^nFoto.	! !!Fotografo methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:30'!setNombreArtistico: val 	nombreArtistico := val.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Fotografo class	instanceVariableNames: ''!!Fotografo class methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/3/2016 21:33'!new: datos	"	datos: #(id nombre apellido email direccion nombreArtistico)		direccion: #(calle numbero)	"	|instacia|	instacia := super new.	instacia init: datos.	^instacia.! !TestCase subclass: #PersonaTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP'!!PersonaTest methodsFor: 'as yet unclassified' stamp: 'gillchristian 10/5/2016 02:20'!test_new_init	"	Persona.new llama a init creando las variables de instancia		id		nombre		apellido	"	|aPerson|	aPerson := Persona new: #(John Doe).	self assert: (aPerson getNombre) = 'John'.	self assert: (aPerson getApellido) = 'Doe'.! !